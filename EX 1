import heapq
GOAL_STATE = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]
DIRS = [(-1, 0), (1, 0), (0, -1), (0, 1)]
def manhattan_distance(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            value = state[i][j]
            if value != 0:
                goal_x = (value - 1) // 3
                goal_y = (value - 1) % 3
                distance += abs(i - goal_x) + abs(j - goal_y)
    return distance
def state_to_tuple(state):
    return tuple(tuple(row) for row in state)
def find_blank(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j
def is_goal(state):
    return state == GOAL_STATE
def a_star(initial_state):
    visited = set()
    heap = []
    g_score = 0
    h_score = manhattan_distance(initial_state)
    heapq.heappush(heap, (h_score + g_score, g_score, initial_state, []))
    while heap:
        f, g, current, path = heapq.heappop(heap)
        if state_to_tuple(current) in visited:
            continue
        visited.add(state_to_tuple(current))
        if is_goal(current):
            return path + [current]
        x, y = find_blank(current)
        for dx, dy in DIRS:
            nx, ny = x + dx, y + dy
            if 0 <= nx < 3 and 0 <= ny < 3:
                new_state = [row[:] for row in current]
                new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
                if state_to_tuple(new_state) not in visited:
                    new_g = g + 1
                    new_h = manhattan_distance(new_state)
                    heapq.heappush(heap, (new_g + new_h, new_g, new_state, path + [current]))
    return None
def print_path(path):
    for step in path:
        for row in step:
            print(row)
        print("-----")
if __name__ == "__main__":
    initial_state = [[1, 2, 3],
                     [4, 0, 6],
                     [7, 5, 8]]

    print("Solving 8-Puzzle problem...\nInitial State:")
    for row in initial_state:
        print(row)
    print("-----")
    solution = a_star(initial_state)
    if solution:
        print("Solution found in", len(solution) - 1, "moves:")
        print_path(solution)
    else:
        print("No solution found.")
